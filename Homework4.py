from functools import reduce

from homework_4_module import iterators

# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
#    Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
#    Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

# python homework_4_module/salary.py 2 4 8

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
#    значения которых больше предыдущего элемента.

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
print([el for el in my_list if el > my_list[my_list.index(el) - 1] and my_list.index(el) != 0])

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.

print([el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0])

# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений.
#    Сформируйте итоговый массив чисел, соответствующих требованию.
#    Элементы выведите в порядке их следования в исходном списке.
#    Для выполнения задания обязательно используйте генератор.

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print([el for el in my_list if my_list.count(el) == 1])


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
#    В список должны войти чётные числа от 100 до 1000 (включая границы).
#    Нужно получить результат вычисления произведения всех элементов списка.


def my_func(prev_el, el):
    return prev_el * el


print(reduce(my_func, [el for el in range(100, 1001) if el % 2 == 0]))

# 6. Реализовать два небольших скрипта:
#    итератор, генерирующий целые числа, начиная с указанного;
#    итератор, повторяющий элементы некоторого списка, определённого заранее.
#    Подсказка: используйте функцию count() и cycle() модуля itertools.
#    Обратите внимание, что создаваемый цикл не должен быть бесконечным.
#    Предусмотрите условие его завершения. #### Например, в первом задании выводим целые числа, начиная с 3.
#    При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие,
#    при котором повторение элементов списка прекратится.

iterators.iterator_to_100(99)
iterators.repeat_iterator(["A", "B", "C"])

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
#    При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n).
#    Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.

fact = iterators.fact(4)
print([el for el in fact])
